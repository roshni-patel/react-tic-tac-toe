{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","id","onClickCallback","value","Board","squareList","squares","firstRow","secondRow","thirdRow","map","square","generateSquareComponents","PLAYER_1","generateSquares","currentId","row","push","col","App","useState","setSquares","turnNumber","setTurnNumber","winner","setWinner","player","setPlayer","checkForWinner","winCombos","board","xOPositions","i","length","position1","position2","position3","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cde3dcb2.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Square.css'\n\nconst Square = (props) => {\n\n  const onButtonClick = () => {\n    const id = props.id\n    props.onClickCallback(id)\n  }\n\n  return <button\n    className=\"square\"\n    key={props.id}\n    onClick={onButtonClick}\n  >\n    {props.value}\n  </button>\n}\n\nSquare.propTypes = {\n  value: PropTypes.string.isRequired,\n  onClickCallback: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default Square\n","import React from 'react';\nimport './Board.css';\nimport Square from './Square';\nimport PropTypes from 'prop-types';\n\n\nconst generateSquareComponents = (squares, onClickCallback) => {\n  const [firstRow, secondRow, thirdRow] = squares;\n  const flattenedSquaresArray = [ ...firstRow, ...secondRow, ...thirdRow];\n  return flattenedSquaresArray.map((square) => {\n    return (\n      <Square \n      key={square.id}\n      value={square.value}\n      id={square.id}\n      onClickCallback={onClickCallback}/>\n    )\n  })\n\n}\n\nconst Board = ({ squares, onClickCallback }) => {\n  const squareList = generateSquareComponents(squares, onClickCallback);\n  return <div className=\"grid\" >\n    {squareList}\n  </div>\n}\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        value: PropTypes.string.isRequired\n      })\n    )\n  ),\n  onClickCallback: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport Board from './components/Board';\n\nconst PLAYER_1 = 'x';\nconst PLAYER_2 = 'o';\n\nconst generateSquares = () => {\n  const squares = [];\n\n  let currentId = 0;\n\n  for (let row = 0; row < 3; row ++) {\n    squares.push([]);\n    for (let col = 0; col < 3; col ++) {\n      squares[row].push({\n        id: currentId,\n        value: '',\n      });\n      currentId += 1;\n    }\n  }\n\n  return squares;\n}\n\nconst App = () => {\n\n  const [squares, setSquares] = useState(generateSquares());\n  const [turnNumber, setTurnNumber] = useState(0);\n  const [winner, setWinner] = useState('');\n  const [player, setPlayer] = useState(PLAYER_1);\n\n  const onClickCallback = (id) => {\n    if (winner === '') {\n    for (let row = 0; row < 3; row += 1) {\n      for (let col = 0; col < 3; col += 1) {\n        if (squares[row][col].id === id && squares[row][col].value === '') {\n          squares[row][col].value = player;\n          player === PLAYER_1? setPlayer(PLAYER_2) : setPlayer(PLAYER_1);\n          setTurnNumber(turnNumber + 1);\n        }\n      }\n    }\n    setSquares(squares);\n\n    if (turnNumber > 3) {\n      setWinner(checkForWinner());\n    }\n  \n  }\n}\n\n  const checkForWinner = () => {\n    const winCombos = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ]\n\n    const [firstRow, secondRow, thirdRow] = squares; \n    const board = [ ...firstRow, ...secondRow, ...thirdRow];\n    const xOPositions = [];\n    \n    // board = ['','X','','O','','X','X','X' ]\n    for (let i = 0; i < winCombos.length; i++) {\n      \n      const position1 = board[winCombos[i][0]];\n      const position2 = board[winCombos[i][1]];\n      const position3 = board[winCombos[i][2]]\n      xOPositions.push([position1, position2, position3]);;\n    }\n\n    for (let i = 0; i < xOPositions.length; i++) {\n      if (xOPositions[i][0].value === 'x' && xOPositions[i][1].value === 'x' && xOPositions[i][2].value === 'x') {\n        return PLAYER_1\n      }\n      else if (xOPositions[i][0].value === 'o' && xOPositions[i][1].value === 'o' && xOPositions[i][2].value === 'o') {\n        return PLAYER_2\n      }\n    }\n\n    return '';\n\n  }\n\n  const resetGame = () => {\n    setSquares(generateSquares());\n    setTurnNumber(0);\n    setWinner('');\n    setPlayer(PLAYER_1); \n  }\n\n  const onClick = () => {\n    resetGame()\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <h1>React Tic Tac Toe</h1>\n      { winner != '' &&\n      <h2>\n        Winner is {winner}\n      </h2>\n       }\n      {winner === '' && turnNumber === 9 && \n      <h2>\n        TIE!\n      </h2> \n      }\n      { winner === '' && turnNumber < 9 &&\n      <h2>\n        Current Player {player}\n      </h2>\n      } \n      <button\n        onClick={onClick}\n        >Reset Game</button>\n      </header>\n      <main>\n        <Board \n        squares={squares} \n        onClickCallback={onClickCallback}/>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}